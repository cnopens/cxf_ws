package com.ritchey.chapel.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class AbsencesExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public AbsencesExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getName());
        sb.append("[");
        sb.append("Hash = ").append(hashCode());
        sb.append(",orderByClause=").append(orderByClause);
        sb.append(",distinct=").append(distinct);
        sb.append(",oredCriteria=").append(oredCriteria);
        sb.append("]");
        return sb.toString();
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andRecordnumberIsNull() {
            addCriterion("RecordNumber is null");
            return (Criteria) this;
        }

        public Criteria andRecordnumberIsNotNull() {
            addCriterion("RecordNumber is not null");
            return (Criteria) this;
        }

        public Criteria andRecordnumberEqualTo(Integer value) {
            addCriterion("RecordNumber =", value, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberNotEqualTo(Integer value) {
            addCriterion("RecordNumber <>", value, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberGreaterThan(Integer value) {
            addCriterion("RecordNumber >", value, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberGreaterThanOrEqualTo(Integer value) {
            addCriterion("RecordNumber >=", value, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberLessThan(Integer value) {
            addCriterion("RecordNumber <", value, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberLessThanOrEqualTo(Integer value) {
            addCriterion("RecordNumber <=", value, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberIn(List<Integer> values) {
            addCriterion("RecordNumber in", values, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberNotIn(List<Integer> values) {
            addCriterion("RecordNumber not in", values, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberBetween(Integer value1, Integer value2) {
            addCriterion("RecordNumber between", value1, value2, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andRecordnumberNotBetween(Integer value1, Integer value2) {
            addCriterion("RecordNumber not between", value1, value2, "recordnumber");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdIsNull() {
            addCriterion("People_Code_ID is null");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdIsNotNull() {
            addCriterion("People_Code_ID is not null");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdEqualTo(String value) {
            addCriterion("People_Code_ID =", value, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdNotEqualTo(String value) {
            addCriterion("People_Code_ID <>", value, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdGreaterThan(String value) {
            addCriterion("People_Code_ID >", value, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdGreaterThanOrEqualTo(String value) {
            addCriterion("People_Code_ID >=", value, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdLessThan(String value) {
            addCriterion("People_Code_ID <", value, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdLessThanOrEqualTo(String value) {
            addCriterion("People_Code_ID <=", value, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdLike(String value) {
            addCriterion("People_Code_ID like", value, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdNotLike(String value) {
            addCriterion("People_Code_ID not like", value, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdIn(List<String> values) {
            addCriterion("People_Code_ID in", values, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdNotIn(List<String> values) {
            addCriterion("People_Code_ID not in", values, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdBetween(String value1, String value2) {
            addCriterion("People_Code_ID between", value1, value2, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andPeopleCodeIdNotBetween(String value1, String value2) {
            addCriterion("People_Code_ID not between", value1, value2, "peopleCodeId");
            return (Criteria) this;
        }

        public Criteria andDateAbsentIsNull() {
            addCriterion("Date_Absent is null");
            return (Criteria) this;
        }

        public Criteria andDateAbsentIsNotNull() {
            addCriterion("Date_Absent is not null");
            return (Criteria) this;
        }

        public Criteria andDateAbsentEqualTo(Date value) {
            addCriterion("Date_Absent =", value, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentNotEqualTo(Date value) {
            addCriterion("Date_Absent <>", value, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentGreaterThan(Date value) {
            addCriterion("Date_Absent >", value, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentGreaterThanOrEqualTo(Date value) {
            addCriterion("Date_Absent >=", value, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentLessThan(Date value) {
            addCriterion("Date_Absent <", value, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentLessThanOrEqualTo(Date value) {
            addCriterion("Date_Absent <=", value, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentIn(List<Date> values) {
            addCriterion("Date_Absent in", values, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentNotIn(List<Date> values) {
            addCriterion("Date_Absent not in", values, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentBetween(Date value1, Date value2) {
            addCriterion("Date_Absent between", value1, value2, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andDateAbsentNotBetween(Date value1, Date value2) {
            addCriterion("Date_Absent not between", value1, value2, "dateAbsent");
            return (Criteria) this;
        }

        public Criteria andAbsencecountIsNull() {
            addCriterion("AbsenceCount is null");
            return (Criteria) this;
        }

        public Criteria andAbsencecountIsNotNull() {
            addCriterion("AbsenceCount is not null");
            return (Criteria) this;
        }

        public Criteria andAbsencecountEqualTo(Double value) {
            addCriterion("AbsenceCount =", value, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountNotEqualTo(Double value) {
            addCriterion("AbsenceCount <>", value, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountGreaterThan(Double value) {
            addCriterion("AbsenceCount >", value, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountGreaterThanOrEqualTo(Double value) {
            addCriterion("AbsenceCount >=", value, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountLessThan(Double value) {
            addCriterion("AbsenceCount <", value, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountLessThanOrEqualTo(Double value) {
            addCriterion("AbsenceCount <=", value, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountIn(List<Double> values) {
            addCriterion("AbsenceCount in", values, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountNotIn(List<Double> values) {
            addCriterion("AbsenceCount not in", values, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountBetween(Double value1, Double value2) {
            addCriterion("AbsenceCount between", value1, value2, "absencecount");
            return (Criteria) this;
        }

        public Criteria andAbsencecountNotBetween(Double value1, Double value2) {
            addCriterion("AbsenceCount not between", value1, value2, "absencecount");
            return (Criteria) this;
        }

        public Criteria andDateTardyIsNull() {
            addCriterion("Date_Tardy is null");
            return (Criteria) this;
        }

        public Criteria andDateTardyIsNotNull() {
            addCriterion("Date_Tardy is not null");
            return (Criteria) this;
        }

        public Criteria andDateTardyEqualTo(Date value) {
            addCriterion("Date_Tardy =", value, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyNotEqualTo(Date value) {
            addCriterion("Date_Tardy <>", value, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyGreaterThan(Date value) {
            addCriterion("Date_Tardy >", value, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyGreaterThanOrEqualTo(Date value) {
            addCriterion("Date_Tardy >=", value, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyLessThan(Date value) {
            addCriterion("Date_Tardy <", value, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyLessThanOrEqualTo(Date value) {
            addCriterion("Date_Tardy <=", value, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyIn(List<Date> values) {
            addCriterion("Date_Tardy in", values, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyNotIn(List<Date> values) {
            addCriterion("Date_Tardy not in", values, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyBetween(Date value1, Date value2) {
            addCriterion("Date_Tardy between", value1, value2, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andDateTardyNotBetween(Date value1, Date value2) {
            addCriterion("Date_Tardy not between", value1, value2, "dateTardy");
            return (Criteria) this;
        }

        public Criteria andTardycountIsNull() {
            addCriterion("TardyCount is null");
            return (Criteria) this;
        }

        public Criteria andTardycountIsNotNull() {
            addCriterion("TardyCount is not null");
            return (Criteria) this;
        }

        public Criteria andTardycountEqualTo(Double value) {
            addCriterion("TardyCount =", value, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountNotEqualTo(Double value) {
            addCriterion("TardyCount <>", value, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountGreaterThan(Double value) {
            addCriterion("TardyCount >", value, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountGreaterThanOrEqualTo(Double value) {
            addCriterion("TardyCount >=", value, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountLessThan(Double value) {
            addCriterion("TardyCount <", value, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountLessThanOrEqualTo(Double value) {
            addCriterion("TardyCount <=", value, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountIn(List<Double> values) {
            addCriterion("TardyCount in", values, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountNotIn(List<Double> values) {
            addCriterion("TardyCount not in", values, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountBetween(Double value1, Double value2) {
            addCriterion("TardyCount between", value1, value2, "tardycount");
            return (Criteria) this;
        }

        public Criteria andTardycountNotBetween(Double value1, Double value2) {
            addCriterion("TardyCount not between", value1, value2, "tardycount");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedIsNull() {
            addCriterion("Dates_Deleted is null");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedIsNotNull() {
            addCriterion("Dates_Deleted is not null");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedEqualTo(Date value) {
            addCriterion("Dates_Deleted =", value, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedNotEqualTo(Date value) {
            addCriterion("Dates_Deleted <>", value, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedGreaterThan(Date value) {
            addCriterion("Dates_Deleted >", value, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedGreaterThanOrEqualTo(Date value) {
            addCriterion("Dates_Deleted >=", value, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedLessThan(Date value) {
            addCriterion("Dates_Deleted <", value, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedLessThanOrEqualTo(Date value) {
            addCriterion("Dates_Deleted <=", value, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedIn(List<Date> values) {
            addCriterion("Dates_Deleted in", values, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedNotIn(List<Date> values) {
            addCriterion("Dates_Deleted not in", values, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedBetween(Date value1, Date value2) {
            addCriterion("Dates_Deleted between", value1, value2, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andDatesDeletedNotBetween(Date value1, Date value2) {
            addCriterion("Dates_Deleted not between", value1, value2, "datesDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedIsNull() {
            addCriterion("Reason_Deleted is null");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedIsNotNull() {
            addCriterion("Reason_Deleted is not null");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedEqualTo(String value) {
            addCriterion("Reason_Deleted =", value, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedNotEqualTo(String value) {
            addCriterion("Reason_Deleted <>", value, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedGreaterThan(String value) {
            addCriterion("Reason_Deleted >", value, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedGreaterThanOrEqualTo(String value) {
            addCriterion("Reason_Deleted >=", value, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedLessThan(String value) {
            addCriterion("Reason_Deleted <", value, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedLessThanOrEqualTo(String value) {
            addCriterion("Reason_Deleted <=", value, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedLike(String value) {
            addCriterion("Reason_Deleted like", value, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedNotLike(String value) {
            addCriterion("Reason_Deleted not like", value, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedIn(List<String> values) {
            addCriterion("Reason_Deleted in", values, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedNotIn(List<String> values) {
            addCriterion("Reason_Deleted not in", values, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedBetween(String value1, String value2) {
            addCriterion("Reason_Deleted between", value1, value2, "reasonDeleted");
            return (Criteria) this;
        }

        public Criteria andReasonDeletedNotBetween(String value1, String value2) {
            addCriterion("Reason_Deleted not between", value1, value2, "reasonDeleted");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Absences
     *
     * @mbggenerated do_not_delete_during_merge Thu Nov 01 09:59:39 CDT 2012
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Absences
     *
     * @mbggenerated Thu Nov 01 09:59:39 CDT 2012
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}